/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class Pair{
    TreeNode node;
    int level;
    public Pair(TreeNode node, int level){
        this.node= node;
        this.level=level;
    }
 }
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        if(root== null ){
            return list;
        }

        Map<Integer,Integer> map = new TreeMap<Integer,Integer>();
        Queue<Pair> q= new LinkedList<Pair>();
        q.add(new Pair(root,0));
        while(!q.isEmpty()){
            Pair pair= q.remove();
            TreeNode node= pair.node;
            int level= pair.level;
             
             map.put(level,node.val);

             if(node.left!=null){
                q.add(new Pair(node.left,level+1));
             }

             if(node.right!=null){
                q.add(new Pair(node.right,level+1));
             }
        }

        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            list.add(entry.getValue());
        }

        return list;
    }
}
