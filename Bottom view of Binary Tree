/*
class Node
{
    int data; //data of the node
    int hd; //horizontal distance of the node
    Node left, right; //left and right references

    // Constructor of tree node
    public Node(int key)
    {
        data = key;
        hd = Integer.MAX_VALUE;
        left = right = null;
    }
}
*/

class Solution {
    public ArrayList<Integer> bottomView(Node root) {
        // Code here
        ArrayList<Integer> list= new ArrayList<>();
        if(root==null)
        return list;
        
        Map<Integer,Integer> map= new TreeMap<>();
        Queue<Pair> q= new LinkedList<Pair>();
        
        q.add(new Pair(root,0));
        while(!q.isEmpty()){
            Pair pair= q.remove();
            int line= pair.line;
            Node node= pair.node;
            
            map.put(line,node.data);
            
            if(node.left!=null){
                q.add(new Pair(node.left,line-1));
            }
            
            if(node.right!=null){
                q.add(new Pair(node.right,line+1));
            }
        }
        
        
        for(Map.Entry<Integer,Integer> entry:map.entrySet() ){
            list.add(entry.getValue());
        }
        
        return list;
        
    }
}

class Pair{
    Node node;
    int line;
    
    public Pair(Node node, int line){
        this.node=node;
        this.line=line;
        
    }
}
